# number of points in moving average
n = 18
# weekly averaged
w =  7 

# initialize the variables
do for [i=1:n] {
    eval(sprintf("back%d=0", i))
}
do for [i=1:w] {
    eval(sprintf("wback%d=0", i))
}

# build shift function (back_n = back_n-1, ..., back1=x)
shift = "("
do for [i=n:2:-1] {
    shift = sprintf("%sback%d = back%d, ", shift, i, i-1)
} 
shift = shift."back1 = x)"

wshift = "("
do for [i=w:2:-1] {
    wshift = sprintf("%swback%d = wback%d, ", wshift, i, i-1)
} 
wshift = wshift."wback1 = x)"
# uncomment the next line for a check
# print shift

# build sum function (back1 + ... + backn)
sum = "(back1"
do for [i=2:n] {
    sum = sprintf("%s+back%d", sum, i)
}
sum = sum.")"

wsum = "(wback1"
do for [i=2:w] {
    wsum = sprintf("%s+wback%d", wsum, i)
}
wsum = wsum.")"

# uncomment the next line for a check
# print sum

# define the functions like in the gnuplot demo
# use macro expansion for turning the strings into real functions
samples(x) = $0 > (n-1) ? n : ($0+1)
avg_n(x) = (shift_n(x), @sum/samples($0))
shift_n(x) = @shift

wsamples(x) = $0 > (w-1) ? w : ($0+1)
wavg_n(x) = (wshift_n(x), @wsum/wsamples($0))
wshift_n(x) = @wshift

# the final plot command looks quite simple
set terminal pngcairo #enhanced background rgb 'black'
#set xlabel "DAY" textcolor rgb "white"
#set ylabel "HOURS" textcolor rgb "white"
#set border lw 1 lc rgb "white"
#set xtics textcolor rgb "white"
#set ytics textcolor rgb "white"

set output "moving_average.png"
plot "perfdata.data" using 1:2 w l lc rgb "blue" lw 1 title "performance" , \
     "perfdata.data" using 1:(wavg_n($2)) w l lc rgb "green" lw 3 title "averaged 7 days", \
     "perfdata.data" using 1:(avg_n($2)) w l lc rgb "red" lw 5 title "averaged  " . n . " days"

